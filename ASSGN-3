 #include <stdio.h>
#include <stdlib.h>

 
struct Node {
    int data;
    struct Node* next;
};

 
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation error\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

 
void insertNode(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;  // If list is empty 
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
    printf("%d inserted into the list\n", data);
}


void printReverse(struct Node* head) {
    if (head == NULL) {
        return;   
    }
    printReverse(head->next);   
    printf("%d ", head->data);   
}

 
void displayList(struct Node* head) {
    struct Node* temp = head;
    if (temp == NULL) {
        printf("List is empty\n");
        return;
    }
    printf("List elements: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

 
int main() {
    struct Node* head = NULL;
    int choice, value;

    while (1) {
        printf("\n===== Linked List Operations =====\n");
        printf("1. Insert node\n");
        printf("2. Print list\n");
        printf("3. Print list in reverse order (recursion)\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                insertNode(&head, value);
                break;

            case 2:
                displayList(head);
                break;

            case 3:
                if (head == NULL) {
                    printf("List is empty\n");
                } else {
                    printf("List in reverse order: ");
                    printReverse(head);
                    printf("\n");
                }
                break;

            case 4:
                printf("Exiting program...\n");
                exit(0);

            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
